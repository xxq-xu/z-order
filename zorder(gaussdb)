/**
 * zorder.cpp implement function & aggregate function about zorder
 * 
 * include: get_range_bounds_single, get_partitionid, interleave_bits
*/
#include "postgres.h"

#include <ctype.h>
#include <stdlib.h>
#include <time.h>
// #include <float.h>
// #include <limits.h>
// #include <math.h>
// #include <string.h>

// #include "catalog/pg_type.h"
// #include "common/int.h"
// #include "funcapi.h"
// #include "lib/hyperloglog.h"
// #include "libpq/pqformat.h"
// #include "miscadmin.h"
// #include "nodes/nodeFuncs.h"
#include "utils/array.h"
#include "utils/datum.h"
// #include "utils/guc.h"
// #include "utils/int8.h"
// #include "utils/numeric.h"
// #include "utils/sortsupport.h"
#include "utils/builtins.h"
#include "utils/extended_statistics.h"
#include "utils/lsyscache.h"
#include "utils/memutils.h"
#include "utils/typcache.h"

static int	get_partitionid_internal(FunctionCallInfo fcinfo);
static ReservoirSamplingState *accumReservoirSampling(ReservoirSamplingState *rstate, Datum dvalue, 
                                                        bool disnull, Oid element_type, MemoryContext rcontext);

/*
 * reservoir_sampling_transfn
 */
Datum reservoir_sampling_transfn(PG_FUNCTION_ARGS)
{
    Oid arg1_typeid = get_fn_expr_argtype(fcinfo->flinfo, 1);
    MemoryContext aggcontext;
    ReservoirSamplingState *state = NULL;
    Datum elem;

    if (arg1_typeid == InvalidOid)
        ereport(ERROR,
                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),
                 errmsg("could not determine input data type")));

    if (!AggCheckCallContext(fcinfo, &aggcontext))
    {
        /* cannot be called directly because of internal-type argument */
        ereport(ERROR,
                (errcode(ERRCODE_SQL_ROUTINE_EXCEPTION),
                 errmsg("reservoir_sampling_transfn called in non-aggregate context")));
    }

    state = PG_ARGISNULL(0) ? NULL : (ReservoirSamplingState *)PG_GETARG_POINTER(0);
    elem = PG_ARGISNULL(1) ? (Datum)0 : PG_GETARG_DATUM(1);
    state = accumReservoirSampling(state,
                                   elem,
                                   PG_ARGISNULL(1),
                                   arg1_typeid,
                                   aggcontext);

    /*
     * The transition type for array_agg() is declared to be "internal", which
     * is a pass-by-value type the same size as a pointer.	So we can safely
     * pass the ArrayBuildState pointer through nodeAgg.c's machinations.
     */
    PG_RETURN_POINTER(state);
}

Datum reservoir_sampling_finalfn(PG_FUNCTION_ARGS)
{
    Datum result;
    ReservoirSamplingState *state = NULL;
    ArrayBuildState *astate = NULL;
    int dims[1];
    int lbs[1];

    /*
     * Test for null before Asserting we are in right context.	This is to
     * avoid possible Assert failure in 8.4beta installations, where it is
     * possible for users to create NULL constants of type internal.
     */
    if (PG_ARGISNULL(0))
        PG_RETURN_NULL(); /* returns null iff no input values */

    /* cannot be called directly because of internal-type argument */
    Assert(AggCheckCallContext(fcinfo, NULL));

    state = (ReservoirSamplingState *)PG_GETARG_POINTER(0);
    astate = &state->astate;

    dims[0] = astate->nelems;
    lbs[0] = 1;

    /*
     * Make the result.  We cannot release the ArrayBuildState because
     * sometimes aggregate final functions are re-executed.  Rather, it is
     * nodeAgg.c's responsibility to reset the aggcontext when it's safe to do
     * so.
     */
    result = makeMdArrayResult(astate, 1, dims, lbs,
                               CurrentMemoryContext,
                               false);

    PG_RETURN_DATUM(result);
}

/*
 * get_partitionid via binary search
 */
Datum
array_binary_search(PG_FUNCTION_ARGS)
{
    int32 result = -1;

    result = (int32) get_partitionid_internal(fcinfo);

    if (result < 0) {
        ereport(ERROR,
            (errcode(ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE),
                errmsg("result out of range (< 0)")));
    }
    PG_RETURN_INT32(result);
}

static int	get_partitionid_internal(FunctionCallInfo fcinfo) {
    ArrayType   *array = PG_GETARG_ARRAYTYPE_P(0);
    Datum       elt1;
    Oid         element_type_value = get_fn_expr_argtype(fcinfo->flinfo, 1);
    Oid			element_type_array = ARR_ELEMTYPE(array);
    int         ndims = ARR_NDIM(array);
    int         *dims = ARR_DIMS(array);
    int         nitems = ArrayGetNItems(ndims, dims);
    int			typlen;
	bool		typbyval = false;
    char		typalign;
    Oid			collation = PG_GET_COLLATION();
    char	    *ptr = NULL;
    TypeCacheEntry *typentry = NULL;
    FunctionCallInfoData locfcinfo;
    
    // if value is not null, get value from arg (value is anyelement, i.e. polymorphic)
    if (PG_ARGISNULL(0) || PG_ARGISNULL(1))
        ereport(ERROR,
            (errcode(ERRCODE_NULL_VALUE_NOT_ALLOWED),
                errmsg("arg cannot be null")));
    else
        elt1 = PG_GETARG_DATUM(1);
    // types need to be the same
    if(element_type_array != element_type_value) {
        ereport(ERROR,
            (errcode(ERRCODE_DATATYPE_MISMATCH),
                errmsg("cannot compare values of different element types for binary search")));
    }

    // prepare for the cmp operator
    /*
	 * We arrange to look up the comparison function only once per series of
	 * calls, assuming the element type doesn't change underneath us. The
	 * typcache is used so that we have no memory leakage when being used as
	 * an index support function.
	 */
	typentry = (TypeCacheEntry *) fcinfo->flinfo->fn_extra;
	if (typentry == NULL ||
		typentry->type_id != element_type_array)
	{
		typentry = lookup_type_cache(element_type_array,
									 TYPECACHE_CMP_PROC_FINFO);
		if (!OidIsValid(typentry->cmp_proc_finfo.fn_oid))
			ereport(ERROR,
					(errcode(ERRCODE_UNDEFINED_FUNCTION),
			   errmsg("could not identify a comparison function for type %s",
					  format_type_be(element_type_array))));
		fcinfo->flinfo->fn_extra = (void *) typentry;
	}
	typlen = typentry->typlen;
	typbyval = typentry->typbyval;
	typalign = typentry->typalign;

	/*
	 * apply the operator to each pair of array elements.
	 */
	InitFunctionCallInfoData(locfcinfo, &typentry->cmp_proc_finfo, 2,
							 collation, NULL, NULL);



    // binary search (array should have no null value)
    int left = 0;
    int right = nitems-1;
    int result = -1;
    while (left <= right) {
        Datum elt0;
        int mid = left + (right - left) / 2;
        int32 cmpresult;
        
        // fetching array values at mid index
        ptr = ARR_DATA_PTR(array);
        if (mid > 0) {
            ptr = att_addlength_pointer(ptr, typlen*mid, ptr);
            ptr = (char *) att_align_nominal(ptr, typalign);
        }
        elt0 = fetch_att(ptr, typbyval, typlen);

        /* Compare the pair of elements */
		locfcinfo.arg[0] = elt0;
		locfcinfo.arg[1] = elt1;
		locfcinfo.argnull[0] = false;
		locfcinfo.argnull[1] = false;
		locfcinfo.isnull = false;
		cmpresult = DatumGetInt32(FunctionCallInvoke(&locfcinfo));

        if (cmpresult == 0) {
            /* equal */
            return mid;
        }
        else if (cmpresult < 0) {
            /* array cur_val < arg_1 val, then search backward */
            left = mid + 1;
        }
        else {
            /* array cur_val > arg_1 val, then search forward */
            result = mid;
            right = mid-1;
        }
    }
    /* array is not null, so when result is -1, the elt1 > array[-1] */
    if (result == -1) {
        return nitems;
    }
    return result;
}


// TODO: add sampling_num as arg in agg function
#define SAMPLING_NUM 20

/*
 * accumResrvoirSampling - accumulate one (more) Datum for an array result
 *
 *	astate is working state (NULL on first call)
 *	rcontext is where to keep working state
 */
ReservoirSamplingState *
accumReservoirSampling(ReservoirSamplingState *rstate,
                       Datum dvalue, bool disnull,
                       Oid element_type,
                       MemoryContext rcontext)
{
    MemoryContext arr_context, oldcontext;

    ArrayBuildState *astate = NULL;

    if (rstate == NULL)
    {
        /* First time through --- initialize */

        /* Make a temporary context to hold all the junk */
        arr_context = AllocSetContextCreate(rcontext,
                                            "accumResrvoirSampling",
                                            ALLOCSET_DEFAULT_MINSIZE,
                                            ALLOCSET_DEFAULT_INITSIZE,
                                            ALLOCSET_DEFAULT_MAXSIZE);
        oldcontext = MemoryContextSwitchTo(arr_context);
        rstate = (ReservoirSamplingState *)palloc(sizeof(ReservoirSamplingState));
        rstate->index = 0;

        // TODO: use XOrShiftRandom
        srand((unsigned int)time(NULL));

        // init ArrayBuildState
        astate = &rstate->astate;
        astate->mcontext = arr_context;
        astate->alen = SAMPLING_NUM; /* arbitrary starting array size */
        astate->dvalues = (Datum *)palloc(astate->alen * sizeof(Datum));
        astate->dnulls = (bool *)palloc(astate->alen * sizeof(bool));
        astate->nelems = 0;
        astate->element_type = element_type;
        get_typlenbyvalalign(element_type,
                             &astate->typlen,
                             &astate->typbyval,
                             &astate->typalign);
    }
    else
    {
        astate = &rstate->astate;
        oldcontext = MemoryContextSwitchTo(astate->mcontext);
        Assert(astate->element_type == element_type);
    }

    /*
     * Ensure pass-by-ref stuff is copied into mcontext; and detoast it too if
     * it's varlena.  (You might think that detoasting is not needed here
     * because construct_md_array can detoast the array elements later.
     * However, we must not let construct_md_array modify the ArrayBuildState
     * because that would mean array_agg_finalfn damages its input, which is
     * verboten.  Also, this way frequently saves one copying step.)
     */
    if (!disnull && !astate->typbyval)
    {
        if (astate->typlen == -1)
            dvalue = PointerGetDatum(PG_DETOAST_DATUM_COPY(dvalue));
        else
            dvalue = datumCopy(dvalue, astate->typbyval, astate->typlen);
    }

    if (astate->nelems >= astate->alen)
    {
        int random = rand() % (rstate->index);
        if (random < SAMPLING_NUM)
        {
            astate->dvalues[random] = dvalue;
            astate->dnulls[random] = disnull;
        }
    }
    else
    {
        astate->dvalues[astate->nelems] = dvalue;
        astate->dnulls[astate->nelems] = disnull;
        astate->nelems++;
    }

    rstate->index++;

    MemoryContextSwitchTo(oldcontext);

    return rstate;
}
